/*
 * Copyright 2013 Red Hat Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 *
 * Authors: Ben Skeggs
 */

#ifdef INCLUDE_PROC
process(PROC_PERF, #perf_init, #perf_recv)
#endif

/******************************************************************************
 * PERF data segment
 *****************************************************************************/
#ifdef INCLUDE_DATA
perf_attr_start:
// parameters
perf_polling_period_us: .b32 100000

// engine usage (0x0-0xff)
perf_eng_gr:   .b8 0
perf_eng_vid:  .b8 0
perf_eng_mc:   .b8 0
#if NVKM_PPWR_CHIPSET >= GF100
perf_eng_pcie: .b8 0
#endif

// dynreclocking values
perf_reclk_last_gr:   .b8 0
perf_reclk_last_vid:  .b8 0
perf_reclk_last_mc:   .b8 0
#if NVKM_PPWR_CHIPSET >= GF100
perf_reclk_last_pcie: .b8 0
#endif
perf_reclk_down_count: .b8 0

.align 4
#endif

/******************************************************************************
 * PERF code segment
 *****************************************************************************/
#ifdef INCLUDE_CODE

#define TICK_CNT 0
#define GR_CNT   1
#define VID_CNT  2
#define MC_CNT   3
#define PCIE_CNT 4

// description
//
// $r15 - current (perf)
// $r14 - sender process name
// $r13 - message
// $r12 - data0
// $r11 - data1
// $r0  - zero
perf_recv:
	imm32($r10, PROC_HOST)
	cmp b32 $r14 $r10
	bra ne #perf_recv_not_host
		cmp b32 $r13 PERF_MSG_LOAD
		bra e #perf_load
		cmp b32 $r13 PERF_MSG_ACK_RECLOCK
		bra e #perf_ack_reclk
		bra   #perf_recv_exit
perf_load:
			clear b32 $r11
			clear b32 $r12
#if NVKM_PPWR_CHIPSET >= GF100
			ld(b8, $r12, #perf_eng_pcie)
			shl b32 $r12 8
#endif
			ld(b8, $r12, #perf_eng_mc)
			shl b32 $r12 8
			ld(b8, $r12, #perf_eng_vid)
			shl b32 $r12 8
			ld(b8, $r12, #perf_eng_gr)
			call(send)
			bra #perf_recv_exit
perf_ack_reclk:
			imm32($r12, PERF_TARGET_LOAD_ENGINES)
			st(b8, #perf_reclk_last_gr, $r12)
			st(b8, #perf_reclk_last_vid, $r12)
			imm32($r12, PERF_TARGET_LOAD_MEM)
			st(b8, #perf_reclk_last_mc, $r12)
#if NVKM_PPWR_CHIPSET >= GF100
			imm32($r12, PERF_TARGET_LOAD_PCIE)
			st(b8, #perf_reclk_last_pcie, $r12)
#endif
			bra #perf_recv_exit
perf_recv_not_host:
	call(perf_counter_readout)
	call(perf_check_reclock)
	ld(b32, $r14, #perf_polling_period_us)
	call(ticks_from_us)
	call(timer)
perf_recv_exit:
	ret

// description
//
// $r15 - current (perf)
// $r0  - zero
perf_counter_readout:
	push $r1 // ticks
	push $r2 // gr
	push $r3 // video
	push $r4 // mc
#if NVKM_PPWR_CHIPSET >= GF100
	push $r5 // pcie
#endif

	nv_iord($r1, NV_PPWR_COUNTER_COUNT(TICK_CNT))
	nv_iord($r2, NV_PPWR_COUNTER_COUNT(GR_CNT))
	nv_iord($r3, NV_PPWR_COUNTER_COUNT(VID_CNT))
	nv_iord($r4, NV_PPWR_COUNTER_COUNT(MC_CNT))
#if NVKM_PPWR_CHIPSET >= GF100
	nv_iord($r5, NV_PPWR_COUNTER_COUNT(PCIE_CNT))
#endif

	// reset the counters
	imm32($r14, NV_PPWR_COUNTER_COUNT_RESET)
	nv_iowr(NV_PPWR_COUNTER_COUNT(TICK_CNT), $r14)
	nv_iowr(NV_PPWR_COUNTER_COUNT(GR_CNT), $r14)
	nv_iowr(NV_PPWR_COUNTER_COUNT(VID_CNT), $r14)
	nv_iowr(NV_PPWR_COUNTER_COUNT(MC_CNT), $r14)
#if NVKM_PPWR_CHIPSET >= GF100
	nv_iowr(NV_PPWR_COUNTER_COUNT(PCIE_CNT), $r14)
#endif

	div $r1 $r1 0xff

	div $r2 $r2 $r1
	st(b8, #perf_eng_gr, $r2)

	div $r3 $r3 $r1
	st(b8, #perf_eng_vid, $r3)

	div $r4 $r4 $r1
	st(b8, #perf_eng_mc, $r4)

#if NVKM_PPWR_CHIPSET >= GF100
	div $r5 $r5 $r1
	st(b8, #perf_eng_pcie, $r5)
#endif

#if NVKM_PPWR_CHIPSET >= GF100
	pop $r5
#endif
	pop $r4
	pop $r3
	pop $r2
	pop $r1
	ret

/* the basic idea:
 *   check each engine and mark if we want to clock down, stay or clock up
 * Sl: safety low
 * Sh: safety high
 * T:  target
 * M:  mark
 * X:  current
 */
#define check_engine(eng, mark, target, margin) /*
*/	ld(b8, $r13, fn(hash)perf_eng_ ## eng) /*
*/	cmpu b8 $r13 target + margin /*
*/	bra na fn(hash)perf_check_reclock_## eng ##_down /*
*/ 		ld(b8, $r14, fn(hash)perf_reclk_last_## eng) /*		// Sh X ff
*/		cmpu b8 $r13 $r14 /*
*/		bra na fn(hash)perf_check_reclock_## eng ##_end /*	// Sh X M
*/			bra fn(hash)perf_check_reclock_send /*		// M X ff
*/perf_check_reclock_## eng ##_down: /*					// 0 X Sh
*/	cmpu b8 $r13 target - margin /*
*/	bra nb fn(hash)perf_check_reclock_## eng ##_end /*		// Sl X Sh
*/ 		ld(b8, $r14, fn(hash)perf_reclk_last_## eng) /*		// 0 X Sl
*/		cmpu b8 $r13 $r14 /*
*/		bra b fn(hash)perf_check_reclock_## eng ##_end /*	// 0 X M
*/			imm32(mark, 1) /*				// M X Sl
*/perf_check_reclock_## eng ##_end:

perf_check_reclock:
	imm32($r12, 0)
	check_engine(gr, $r12, PERF_TARGET_LOAD_ENGINES, PERF_TARGET_SAFETY)
	check_engine(mc, $r12, PERF_TARGET_LOAD_MEM, PERF_TARGET_SAFETY)
	check_engine(vid, $r12, PERF_TARGET_LOAD_ENGINES, PERF_TARGET_SAFETY)
#if NVKM_PPWR_CHIPSET >= GF100
	check_engine(pcie, $r12, PERF_TARGET_LOAD_PCIE, PERF_TARGET_SAFETY)
#endif
	cmp b8 $r12 0
	bra ne #perf_check_reclock_none
		ld(b8, $r14, #perf_reclk_down_count)
		cmpu b8 $r14 150 /* we wait for 15 seconds before clocking down */
		bra a #perf_check_reclock_send
			add b8 $r14 1
			st(b8, #perf_reclk_down_count, $r14)
			bra #perf_check_reclock_end
perf_check_reclock_send:
	ld(b8, $r14, #perf_eng_gr)
	st(b8, #perf_reclk_last_gr, $r14)
	ld(b8, $r14, #perf_eng_mc)
	st(b8, #perf_reclk_last_mc, $r14)
	ld(b8, $r14, #perf_eng_vid)
	st(b8, #perf_reclk_last_vid, $r14)
#if NVKM_PPWR_CHIPSET >= GF100
	ld(b8, $r14, #perf_eng_pcie)
	st(b8, #perf_reclk_last_pcie, $r14)
#endif
	imm32($r14, PROC_HOST)
	imm32($r13, HOST_MSG_RECLOCK)
	call(perf_load)
perf_check_reclock_none:
	imm32($r12, 0)
	st(b8, #perf_reclk_down_count, $r12)
perf_check_reclock_end:
	ret

// description
//
// $r15 - current (perf)
// $r0  - zero
perf_init:
	// set up the total ticks counter first
	imm32($r14, NV_PPWR_COUNTER_MODE_ALWAYS)
	nv_iowr(NV_PPWR_COUNTER_MODE(TICK_CNT), $r14)

	// set up the other counters, with fermi there are more
	imm32($r14, NV_PPWR_COUNTER_MODE_IF_NOT_ALL)
	nv_iowr(NV_PPWR_COUNTER_MODE(GR_CNT), $r14)
	nv_iowr(NV_PPWR_COUNTER_MODE(VID_CNT), $r14)
	nv_iowr(NV_PPWR_COUNTER_MODE(MC_CNT), $r14)
#if NVKM_PPWR_CHIPSET >= GF100
	nv_iowr(NV_PPWR_COUNTER_MODE(PCIE_CNT), $r14)
#endif

	// core load counter
	imm32($r14,
		  NV_PPWR_COUNTER_SIG_GR
		| NV_PPWR_COUNTER_SIG_GR_GPC
		| NV_PPWR_COUNTER_SIG_GR_ROP
#if NVKM_PPWR_CHIPSET >= GF100
		| NV_PPWR_COUNTER_SIG_GR_HUB
		| NV_PPWR_COUNTER_SIG_PCOPY0
		| NV_PPWR_COUNTER_SIG_PCOPY1
#endif
#if NVKM_PPWR_CHIPSET >= GK104
		| NV_PPWR_COUNTER_SIG_PCOPY2
#endif
	)
	nv_iowr(NV_PPWR_COUNTER_MASK(GR_CNT), $r14)

	// video load counter
	imm32($r14,
		  NV_PPWR_COUNTER_SIG_PVLD
		| NV_PPWR_COUNTER_SIG_PPDEC
		| NV_PPWR_COUNTER_SIG_PPPP
#if NVKM_PPWR_CHIPSET >= GK104
		| NV_PPWR_COUNTER_SIG_PVENC
#endif
	)
	nv_iowr(NV_PPWR_COUNTER_MASK(VID_CNT), $r14)

	// memory load counter
	imm32($r14,
#if NVKM_PPWR_CHIPSET >= GF100
		  NV_PPWR_COUNTER_SIG_BFB_PART0_REQ
#else
		  NV_PPWR_COUNTER_SIG_FB_PART0_REQ
#endif
	)
	nv_iowr(NV_PPWR_COUNTER_MASK(MC_CNT), $r14)

	// pcie load counter
#if NVKM_PPWR_CHIPSET >= GF100
	imm32($r14, NV_PPWR_COUNTER_SIG_PCIE)
	nv_iowr(NV_PPWR_COUNTER_MASK(PCIE_CNT), $r14)
#endif

	// initial read out
	call(perf_counter_readout)

	// schedule the next read out
	ld(b32, $r14, #perf_polling_period_us)
	call #ticks_from_us
	call(timer)

	ret
#endif
